<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LOGIN</title>
    <link rel="stylesheet" href="../../styles.css">
    <link rel="stylesheet" href="sources.css">
</head>
<body>
    <div id="LOGIN_CONTAINER">
        <form id="LOGIN_FORM">
          <img src="../../assets/logo_blue.png" alt="">
          <h2>Inicio De Sesion</h2>
          <input type="email" name="email" id="email" placeholder="email" required>
          <input type="password" name="password" id="password" placeholder="Contrase√±a" required>
          <button type="submit">Ingresar</button>
          <a href="./register.html">Registrarse</a>
        </form>
        <a href="./app/chat.html">chat</a>
        <a href="../../pruebas/chat/v1/v1.html">prueba db</a>
    </div>

    <script>
      // URL de tu webhook n8n
      const LOGIN = "http://localhost:5678/webhook/320cbc47-3414-432b-9645-6b61121c9d5d";
    </script>

    <script>  
  // Vincular la funci√≥n al formulario
  document.getElementById("LOGIN_FORM").addEventListener("submit", enviarLogin);
  // Funci√≥n que env√≠a los datos al webhook
  async function enviarLogin(event) {
    event.preventDefault(); // evita que el form recargue la p√°gina

    // Obtengo valores de los inputs
    const email = document.getElementById("email").value;
    const password = document.getElementById("password").value;

    try {
      // Enviar datos al webhook
      const response = await fetch(LOGIN, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email, password })
      });

      if (response.ok) {
        const data = await response.json();
        console.log("Respuesta del servidor:", data);
        alert("Login enviado con √©xito ‚úÖ");
      } else {
        console.error("Error al enviar:", response.statusText);
        alert("Error en el login ‚ùå");
      }
    } catch (error) {
      console.error("Error de red:", error);
      alert("No se pudo conectar con el servidor üö®");
    }
  }
</script>

<script>
// üîπ Guardar el token con expiraci√≥n de 2 minutos
function guardarToken(token) {
  const expiraEn = Date.now() + 2 * 60 * 1000; // 2 minutos en ms
  const data = { token, expiraEn };
  sessionStorage.setItem("jwtData", JSON.stringify(data));

  console.log("‚úÖ Token guardado en sessionStorage");
  console.log(token);
  redirigirSiTokenValido("../../pruebas/chat/v1/v1.html");

  // Programar eliminaci√≥n autom√°tica despu√©s de 2 min
  setTimeout(() => {
    forzarReinicioSesion();
  }, 2 * 60 * 1000);
}

// üîπ Eliminar el token manualmente
function eliminarToken() {
  sessionStorage.removeItem("jwtData");
  console.log("üóëÔ∏è Token eliminado de sessionStorage");
}

// üîπ Forzar cierre de sesi√≥n y recargar pesta√±a
function forzarReinicioSesion() {
  eliminarToken();
  alert("‚ö†Ô∏è Tu sesi√≥n ha expirado. Debes iniciar sesi√≥n nuevamente.");
  location.reload(); // recarga la pesta√±a
}
</script>

<script>
// üöÄ Simulaci√≥n: despu√©s del login, se guarda un token
/*document.addEventListener("DOMContentLoaded", () => {
  // prueba con un token falso
  const tokenPrueba = "abc.def.ghisdfsfer53-4lnbdfklbn34-5n34n5b34n5b34";  
  guardarToken(tokenPrueba);
    console.log(tokenPrueba);
});*/
</script>

<script>
// üîπ Redirigir al usuario si el token es v√°lido y no ha expirado
function redirigirSiTokenValido(urlDestino) {
  const data = sessionStorage.getItem("jwtData");
  if (!data) {
    console.warn("‚ö†Ô∏è No hay token, debe iniciar sesi√≥n");
    return;
  }

  const { token, expiraEn } = JSON.parse(data);

  if (Date.now() > expiraEn) {
    console.warn("‚ö†Ô∏è El token expir√≥, redirigiendo a login...");
    sessionStorage.removeItem("jwtData"); // limpiar token
    alert("Tu sesi√≥n ha expirado. Por favor inicia sesi√≥n nuevamente.");
    return;
  }

  if (token) {
    // üîë Token vigente ‚Üí redirigir a la p√°gina autorizada
    console.log("‚úÖ Token v√°lido, redirigiendo a:", urlDestino);
    window.location.href = urlDestino;
  }
}
</script>

<!--

<script>
  //esto ya es para el chat para enviar el token desde el chat y si y solo si responde correctamente se le da acceso a hacer cosas
  // üîπ Obtener token desde sessionStorage
function obtenerToken() {
  const data = sessionStorage.getItem("jwtData");
  if (!data) return null;

  const { token, expiraEn } = JSON.parse(data);

  // Validar expiraci√≥n
  if (Date.now() > expiraEn) {
    forzarReinicioSesion(); // si ya venci√≥, cerrar sesi√≥n
    return null;
  }
  return token;
}
</script>

<script>
  // üîπ Enviar petici√≥n autenticada al webhook
async function enviarPeticionProtegida(webhookUrl, payload = {}) {
  const token = obtenerToken();
  if (!token) {
    console.warn("‚ö†Ô∏è No hay token v√°lido, redirigiendo a login...");
    return;
  }

  try {
    const response = await fetch(webhookUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${token}` // üîë aqu√≠ se env√≠a el JWT
      },
      body: JSON.stringify(payload)
    });

    if (response.ok) {
      const data = await response.json();
      console.log("‚úÖ Respuesta del servidor:", data);
      return data;
    } else {
      console.error("‚ùå Error en la petici√≥n:", response.statusText);
      if (response.status === 401) {
        forzarReinicioSesion(); // token inv√°lido o caducado
      }
    }
  } catch (error) {
    console.error("üö® Error de red:", error);
  }
}

// Enviar petici√≥n autenticada
const WEBHOOK_PROTEGIDO = "http://localhost:5678/webhook/40dbaa31-9787-408f-bcef-ffb34bd563c8";
enviarPeticionProtegida(WEBHOOK_PROTEGIDO, { accion: "listar_usuarios" });
</script>

-->
</body>
</html>